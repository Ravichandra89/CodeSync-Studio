generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  passwordHash String
  provider     String
  avatarUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project[]
  sessions  Session[]
}

model Project {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  visibility  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  file     File[]
  sessions Session[]
}

model File {
  id           String   @id @default(uuid())
  projectId    String
  fileName     String
  language     String
  originalCode String
  currentCode  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id])
  sessions  Session[]
}

model Session {
  id                 String   @id @default(uuid())
  userId             String
  projectId          String
  fileId             String

  title              String?
  promptText         String
  inputCodeSnapshot  String
  outputCodeSnapshot String
  modelUsed          String
  status             String   @default("pending")
  errorMessage       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  versionHistory VersionHistory[]
  llmLogs        LLMLog[]

  user     User    @relation(fields: [userId], references: [id])
  project  Project @relation(fields: [projectId], references: [id])
  file     File    @relation(fields: [fileId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([fileId])
}

model VersionHistory {
  id            String   @id @default(uuid())
  sessionId     String
  session       Session  @relation(fields: [sessionId], references: [id])

  versionNumber Int
  changeType    String
  beforeCode    String
  afterCode     String

  createdAt DateTime @default(now())

  @@index([sessionId])
}

model LLMLog {
  id               String   @id @default(uuid())
  sessionId        String
  session          Session  @relation(fields: [sessionId], references: [id])

  modelUsed        String
  tokensPrompt     Int
  tokensCompletion Int
  latency          Int?
  statusCode       Int
  errorMessage     String?

  createdAt DateTime @default(now())

  @@index([sessionId])
}
